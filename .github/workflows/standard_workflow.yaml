name: Pre-commit, pytest CI, and MySQL setup

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0

  pytest:
    needs: pre-commit
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.21
        ports:
          - 50002:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: SQLAlchemyExample
#          MYSQL_DB_NAME: SQLAlchemyExample
#          MYSQL_HOST: localhost
          MYSQL_ROOT_PASSWORD: N0tS0S3curePassw0rd
          MYSQL_PASSWORD: N0tS0S3curePassw0rd
#          MYSQL_TCP_PORT_EXAMPLES: 50002
#          SQLALCHEMY_SILENCE_UBER_WARNING: 1
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Verify DB exists
        run: mysql --host 127.0.0.1 --port 50002 -uroot -e "SHOW DATABASES LIKE 'SQLAlchemyExample'"

#      - name: Validate composer.json and composer.lock
#        run: composer validate --strict

#      - name: Install dependencies
#        run: docker-compose install --prefer-dist --no-progress

#      - name: Create Docker Containers
#        run: docker-compose create && docker-compose start

#      - name: Start Docker Containers
#        run: docker-compose start

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2

#      - name: Build Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: true
#          tags: your-docker-image-tag

#      - name: Copy init.sql to the Docker context
#        run: cp init.sql .github/workflows/

#      - name: Run MySQL container with custom init script
#        run: |
#          docker run -d \
#            --name mysql-container \
#            -p 50002:3306 \
#            -e MYSQL_ROOT_PASSWORD=N0tS0S3curePassw0rd \
#            -v ${{ github.workspace }}/.github/workflows/init.sql:/docker-entrypoint-initdb.d/init.sql \
#            your-docker-image-tag


      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install editable package
        run: pip install -e .

#      - name: Wait for MySQL
#        run: |
#          sleep 10

#      - name: Initialize MySQL Database
#        run: |
#          mysql -h localhost -P 50002 -uroot -pN0tS0S3curePassw0rd -e 'CREATE DATABASE IF NOT EXISTS SQLAlchemyExample;'

      - name: Run pytest
        run: pytest --cov=./

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
